<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIADvEQAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgEAAAA9ntg7QAAEbZJ
        REFUeNrtnXuUVdV9xz93GObFYwB5g7xU5CEgT0GMkUEeptQkXX1oXJpEbFw2q9ZkmTZp0rSNwa6upquu
        LKm1icbWJgEVlGBkhre8FFFECMj7ISPDS+YBwzAMM7d/jOOdx517vueefeaOl9/n/KV3s39n7/2bc87e
        399vbzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
        wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzCcEUn1DVwldCSXDlymirr2ZdUcIGw6MJQC
        JnEtuZRxgE1s5hOiIVvN5DoKmMQAcihlPxt4i9LQrRot6MX32UsN0c+uC6zlK2SHarUvP+ZAE6vnKeJL
        dEx1d1xtDGMJlxsNQ8N1jh/SKTSrI3idK3GsnuG75Ka6S64m+vFanGGovyr5WzJDsTqIwlatVvDXdEh1
        t1wtZPIEta0ORZSTzArBahb/Tl0Cq8V8IdUdc7UwnmMJBiJKlKV0dm51GiUeVv+v6WsgyGMoQgc6kCGV
        jVLLlavqK3QegzxKfIGxbHFqM8KX6etRpoARvB/7T/8OkEEXBjKcwQykK7nil2UdVZRSwhH2coKKNp0N
        p4JrmO1ZpidTHDtAH+G10ptJyTpAhHzGM4tbGEE3cpNYQ4hyiTL2sYU1bKc8jZ8IExkrlBpKxGkf3MKN
        nmU6MLTxf6oOEKEf8/gLJtAtwA1GyCWXftzBX/EeL/E6JWnpBBnMpqtQLo8OXHFmNZO50uQyz7/b5fNN
        tlLt8Xnh96rmLeYHcqj2Sn/el3rgKacrsUPYK1ld4K/aDKbxKhcdD37DVcVSpqTdgvSfUCm0vY5HnVq9
        n0uC1Roe8lNpHg9xOKTBb7gO8VBarVB15L+ldp9lmkOrOfxaslrCzXql3flXzoc8/FGiVLCA7qkeN2cM
        Y7/U6pXkO7Q6ynPdof5apq8+9OJZ5+/91q5q/pNrUj1yjvi61Gt1PO7U6rfjrv83v67wiFphN56RqnR1
        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
</value>
  </data>
</root>